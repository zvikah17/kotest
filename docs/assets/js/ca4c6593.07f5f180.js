"use strict";(self.webpackChunkkotestdocs=self.webpackChunkkotestdocs||[]).push([[2482],{3905:function(e,t,r){r.d(t,{Zo:function(){return l},kt:function(){return m}});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=n.createContext({}),d=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},l=function(e){var t=d(e.components);return n.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=d(r),m=o,f=u["".concat(c,".").concat(m)]||u[m]||p[m]||a;return r?n.createElement(f,i(i({ref:t},l),{},{components:r})):n.createElement(f,i({ref:t},l))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=u;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var d=2;d<a;d++)i[d]=r[d];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},47437:function(e,t,r){r.r(t),r.d(t,{assets:function(){return l},contentTitle:function(){return c},default:function(){return m},frontMatter:function(){return s},metadata:function(){return d},toc:function(){return p}});var n=r(87462),o=r(63366),a=(r(67294),r(3905)),i=["components"],s={title:"Test Ordering",slug:"test-ordering.html"},c=void 0,d={unversionedId:"framework/test_ordering",id:"framework/test_ordering",title:"Test Ordering",description:"When running multiple tests from a Spec, there's a certain order on how to execute them.",source:"@site/docs/framework/test_ordering.md",sourceDirName:"framework",slug:"/framework/test-ordering.html",permalink:"/docs/next/framework/test-ordering.html",editUrl:"https://github.com/kotest/kotest/blob/master/documentation/docs/framework/test_ordering.md",tags:[],version:"current",frontMatter:{title:"Test Ordering",slug:"test-ordering.html"},sidebar:"framework",previous:{title:"Spec Ordering",permalink:"/docs/next/framework/spec-ordering.html"},next:{title:"Grouping Tests",permalink:"/docs/next/framework/tags.html"}},l={},p=[{value:"Sequential Ordering",id:"sequential-ordering",level:3},{value:"Random Ordering",id:"random-ordering",level:3},{value:"Lexicographic Ordering",id:"lexicographic-ordering",level:3}],u={toc:p};function m(e){var t=e.components,r=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"When running multiple tests from a Spec, there's a certain order on how to execute them."),(0,a.kt)("p",null," By default, a ",(0,a.kt)("strong",{parentName:"p"},"sequential")," order is used (order that tests are defined in the spec), but it's also possible to configure them\nto be executed in a ",(0,a.kt)("strong",{parentName:"p"},"random")," order or ",(0,a.kt)("strong",{parentName:"p"},"lexicographic")," order."),(0,a.kt)("p",null,"This setting can be configured in either a ",(0,a.kt)("inlineCode",{parentName:"p"},"Spec")," or in ",(0,a.kt)("a",{parentName:"p",href:"/docs/next/framework/project-config.html"},"ProjectConfig")," by overriding the ",(0,a.kt)("inlineCode",{parentName:"p"},"testCaseOrder")," function.\nIf both exist, the ",(0,a.kt)("inlineCode",{parentName:"p"},"Spec"),"'s configuration will have priority."),(0,a.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"Nested tests will always run in discovery order (sequential) regardless of test ordering setting."))),(0,a.kt)("h3",{id:"sequential-ordering"},"Sequential Ordering"),(0,a.kt)("p",null,"Root tests are dispatched in the order they are defined in the spec file."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},'class SequentialSpec : StringSpec() {\n\n    override fun testCaseOrder(): TestCaseOrder? = TestCaseOrder.Sequential\n\n    init {\n      "foo" {\n        // I run first as I\'m defined first\n      }\n\n      "bar" {\n        // I run second as I\'m defined second\n      }\n    }\n}\n')),(0,a.kt)("h3",{id:"random-ordering"},"Random Ordering"),(0,a.kt)("p",null,"Root tests are dispatched in a random order."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},'class RandomSpec : StringSpec() {\n\n    override fun testCaseOrder(): TestCaseOrder? = TestCaseOrder.Random\n\n    init {\n      "foo" {\n        // This test may run first or second\n      }\n\n      "bar" {\n        // This test may run first or second\n      }\n    }\n}\n')),(0,a.kt)("h3",{id:"lexicographic-ordering"},"Lexicographic Ordering"),(0,a.kt)("p",null,"Root tests are dispatched in a lexicographic order."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},'class LexicographicSpec : StringSpec() {\n\n    override fun testCaseOrder(): TestCaseOrder? = TestCaseOrder.Lexicographic\n\n    init {\n      "foo" {\n        // I run second as bar < foo\n      }\n\n      "bar" {\n        // I run first as bar < foo\n      }\n    }\n}\n')))}m.isMDXComponent=!0}}]);