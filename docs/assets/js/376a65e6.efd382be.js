"use strict";(self.webpackChunkkotestdocs=self.webpackChunkkotestdocs||[]).push([[9024],{3905:function(e,t,n){n.d(t,{Zo:function(){return m},kt:function(){return d}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},m=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),p=c(n),d=a,h=p["".concat(l,".").concat(d)]||p[d]||u[d]||i;return n?r.createElement(h,s(s({ref:t},m),{},{components:n})):r.createElement(h,s({ref:t},m))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,s=new Array(i);s[0]=p;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:a,s[1]=o;for(var c=2;c<i;c++)s[c]=n[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},35952:function(e,t,n){n.r(t),n.d(t,{assets:function(){return m},contentTitle:function(){return l},default:function(){return d},frontMatter:function(){return o},metadata:function(){return c},toc:function(){return u}});var r=n(87462),a=n(63366),i=(n(67294),n(3905)),s=["components"],o={title:"JSON Schema Matchers",slug:"json-schema-matchers.html",sidebar_label:"Schema matchers"},l=void 0,c={unversionedId:"assertions/json/schema",id:"version-5.3/assertions/json/schema",title:"JSON Schema Matchers",description:"| Matcher             | Description                                                                                                                                         | Targets       |",source:"@site/versioned_docs/version-5.3/assertions/json/schema.md",sourceDirName:"assertions/json",slug:"/assertions/json/json-schema-matchers.html",permalink:"/docs/assertions/json/json-schema-matchers.html",editUrl:"https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.3/assertions/json/schema.md",tags:[],version:"5.3",frontMatter:{title:"JSON Schema Matchers",slug:"json-schema-matchers.html",sidebar_label:"Schema matchers"},sidebar:"assertions",previous:{title:"Matching content",permalink:"/docs/assertions/json/content-json-matchers.html"},next:{title:"Ktor",permalink:"/docs/assertions/ktor-matchers.html"}},m={},u=[{value:"Defining Schemas",id:"defining-schemas",level:2},{value:"Validating",id:"validating",level:2}],p={toc:u};function d(e){var t=e.components,n=(0,a.Z)(e,s);return(0,i.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Matcher"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Targets"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"shouldMatchSchema")),(0,i.kt)("td",{parentName:"tr",align:null},"Validates that a ",(0,i.kt)("inlineCode",{parentName:"td"},"String")," or ",(0,i.kt)("inlineCode",{parentName:"td"},"kotlinx.serialization.JsonElement")," matches a ",(0,i.kt)("inlineCode",{parentName:"td"},"JsonSchema"),". See description below for details on constructing schemas."),(0,i.kt)("td",{parentName:"tr",align:"left"},"Multiplatform")))),(0,i.kt)("h2",{id:"defining-schemas"},"Defining Schemas"),(0,i.kt)("p",null,"A subset of ",(0,i.kt)("a",{parentName:"p",href:"https://json-schema.org/"},"JSON Schemas")," can be defined either by parsing a textual schema. Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'val parsedSchema = parseSchema(\n  """\n  {\n  "$id": "https://example.com/geographical-location.schema.json",  // will  be ignored\n  "$schema": "https://json-schema.org/draft/2020-12/schema",       // will be ignored\n  "title": "Longitude and Latitude Values",                        // will be ignored\n  "description": "A geographical coordinate.",                     // will be ignored\n  "required": [ "latitude", "longitude" ],\n  "type": "object",\n  "properties": {\n    "latitude": {\n      "type": "number",\n      "minimum": -90,\n      "maximum": 90\n    },\n    "longitude": {\n      "type": "number",\n      "minimum": -180,\n      "maximum": 180\n    }\n  }\n}\n  """\n)\n')),(0,i.kt)("p",null,"or using Kotest's built-in DSL:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'val addressSchema = jsonSchema {\n  obj {   // object is reserved, obj was chosen over jsonObject for brevity but could be changed ofc, or jsonObject could be added as alternative.\n    withProperty("street", required = true) { string() }\n    withProperty("zipCode", required = true) {\n      integer {\n        beEven() and beInRange(10000..99999)   // supports constructing a matcher that will be used to test values\n      }\n    }\n    additionalProperties = false   // triggers failure if other properties are defined in actual\n  }\n}\n\nval personSchema = jsonSchema {\n  obj {\n    withProperty("name", required = true) { string() }\n    withProperty("address") { addressSchema() } // Schemas can re-use other schemas \ud83c\udf89\n  }\n}\n')),(0,i.kt)("p",null,"\u26a0\ufe0f Note that Kotest only supports a subset of JSON schema currently. Currently missing support for:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"$defs and $refs"),(0,i.kt)("li",{parentName:"ul"},"Recursive schemas"),(0,i.kt)("li",{parentName:"ul"},"Parsing of schema composition"),(0,i.kt)("li",{parentName:"ul"},"string.format"),(0,i.kt)("li",{parentName:"ul"},"array.prefixItems,"),(0,i.kt)("li",{parentName:"ul"},"array.contains,"),(0,i.kt)("li",{parentName:"ul"},"array.items = false"),(0,i.kt)("li",{parentName:"ul"},"array.maxContains"),(0,i.kt)("li",{parentName:"ul"},"array.minContains"),(0,i.kt)("li",{parentName:"ul"},"array.uniqueItems"),(0,i.kt)("li",{parentName:"ul"},"enum")),(0,i.kt)("h2",{id:"validating"},"Validating"),(0,i.kt)("p",null,"Once a schema has been defined, you can validate ",(0,i.kt)("inlineCode",{parentName:"p"},"String")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"kotlinx.serialization.JsonElement")," against it:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'"{}" shouldMatchSchema personSchema\n\n// fails with:\n// $.name => Expected string, but was undefined\n\n""" { "name": "Emil", "age": 34 } """\n// Passes, since address isn\'t required and `additionalProperties` are allowed\n')))}d.isMDXComponent=!0}}]);