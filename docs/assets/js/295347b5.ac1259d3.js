"use strict";(self.webpackChunkkotestdocs=self.webpackChunkkotestdocs||[]).push([[9816],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return f}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=s(n),f=a,d=m["".concat(c,".").concat(f)]||m[f]||u[f]||i;return n?r.createElement(d,o(o({ref:t},p),{},{components:n})):r.createElement(d,o({ref:t},p))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var s=2;s<i;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},96360:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return c},default:function(){return f},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return u}});var r=n(87462),a=n(63366),i=(n(67294),n(3905)),o=["components"],l={id:"reflective_arbs",title:"Reflective Arbs",slug:"reflective-arbs.html"},c=void 0,s={unversionedId:"proptest/reflective_arbs",id:"proptest/reflective_arbs",title:"Reflective Arbs",description:"When running tests on JVM, Kotest supports generating more complex Arbs automatically. This can be useful when you",source:"@site/docs/proptest/reflective_arbs.md",sourceDirName:"proptest",slug:"/proptest/reflective-arbs.html",permalink:"/docs/next/proptest/reflective-arbs.html",editUrl:"https://github.com/kotest/kotest/blob/master/documentation/docs/proptest/reflective_arbs.md",tags:[],version:"current",frontMatter:{id:"reflective_arbs",title:"Reflective Arbs",slug:"reflective-arbs.html"},sidebar:"proptest",previous:{title:"Extra Arbs",permalink:"/docs/next/proptest/property-test-extra-arbs.html"}},p={},u=[],m={toc:u};function f(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"When running tests on ",(0,i.kt)("strong",{parentName:"p"},"JVM"),", Kotest supports generating more complex ",(0,i.kt)("inlineCode",{parentName:"p"},"Arb"),"s automatically. This can be useful when you\nhave a ",(0,i.kt)("inlineCode",{parentName:"p"},"data class")," which carries a simple combination of data which can already be automatically derived."),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'enum class Currency {\n  USD, GBP, EUR\n}\n\ndata class CurrencyAmount(\n  val amount: Long,\n  val currency: Currency\n)\n\ncontext("All currencies converts to EUR") { // In some spec\n  checkAll(Arb.bind<CurrencyAmount>()) { currencyAmount ->\n    val converted = currencyAmount.convertTo(EUR)\n    converted.currency shouldBe EUR\n  }\n}\n')),(0,i.kt)("p",null,"Reflective binding is supported for:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Data classes, where all properties also fall into this category"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Pair"),", where 1st and 2nd fall into this category"),(0,i.kt)("li",{parentName:"ul"},"Primitives"),(0,i.kt)("li",{parentName:"ul"},"Enums"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"LocalDate"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"LocalDateTime"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"LocalTime"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"Period"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"Instant")," from ",(0,i.kt)("inlineCode",{parentName:"li"},"java.time")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"BigDecimal"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"BigInteger")),(0,i.kt)("li",{parentName:"ul"},"Collections (",(0,i.kt)("inlineCode",{parentName:"li"},"Set"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"List"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"Map"),")"),(0,i.kt)("li",{parentName:"ul"},"Other types for which you have provided an Arb explicitly using the ",(0,i.kt)("inlineCode",{parentName:"li"},"providedArbs")," parameter")))}f.isMDXComponent=!0}}]);