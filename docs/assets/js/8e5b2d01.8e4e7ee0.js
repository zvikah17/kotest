"use strict";(self.webpackChunkkotestdocs=self.webpackChunkkotestdocs||[]).push([[2033],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),f=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=f(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=f(n),m=a,d=u["".concat(l,".").concat(m)]||u[m]||p[m]||o;return n?r.createElement(d,s(s({ref:t},c),{},{components:n})):r.createElement(d,s({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=u;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var f=2;f<o;f++)s[f]=n[f];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},96867:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return i},metadata:function(){return f},toc:function(){return p}});var r=n(87462),a=n(63366),o=(n(67294),n(3905)),s=["components"],i={id:"fail_fast",title:"Fail Fast",slug:"fail-fast.html",sidebar_label:"Fail Fast"},l=void 0,f={unversionedId:"framework/fail_fast",id:"version-5.2/framework/fail_fast",title:"Fail Fast",description:"Kotest can eagerly fail a list of tests if one of those tests fails. This is called fail fast.",source:"@site/versioned_docs/version-5.2/framework/fail_fast.md",sourceDirName:"framework",slug:"/framework/fail-fast.html",permalink:"/docs/5.2/framework/fail-fast.html",editUrl:"https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2/framework/fail_fast.md",tags:[],version:"5.2",frontMatter:{id:"fail_fast",title:"Fail Fast",slug:"fail-fast.html",sidebar_label:"Fail Fast"},sidebar:"framework",previous:{title:"Blocking Tests",permalink:"/docs/5.2/framework/timeouts/blocking-tests.html"},next:{title:"Fail On Empty Test Suite",permalink:"/docs/5.2/framework/fail-on-empty-test-suite.html"}},c={},p=[],u={toc:p};function m(e){var t=e.components,n=(0,a.Z)(e,s);return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Kotest can eagerly fail a list of tests if one of those tests fails. This is called ",(0,o.kt)("em",{parentName:"p"},"fail fast"),"."),(0,o.kt)("p",null,"Fail fast can take affect at the spec level, or at a parent test level."),(0,o.kt)("p",null,"In the following example, we enable failfast for a parent test, and the first failure inside that context,\nwill cause the rest to be skipped."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'class FailFastTests() : FunSpec() {\n   init {\n      context("context with fail fast enabled").config(failfast = true) {\n         test("a") {} // pass\n         test("b") { error("boom") } // fail\n         test("c") {} // skipped\n         context("d") {  // skipped\n            test("e") {} // skipped\n         }\n      }\n   }\n}\n')),(0,o.kt)("p",null,"This can be enabled for all scopes in a Spec by setting failfast at the spec level."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'class FailFastTests() : FunSpec() {\n   init {\n\n      failfast = true\n\n      context("context with fail fast enabled at the spec level") {\n         test("a") {} // pass\n         test("b") { error("boom") } // fail\n         test("c") {} // skipped\n         context("d") {  // skipped\n            test("e") {} // skipped\n         }\n      }\n   }\n}\n')))}m.isMDXComponent=!0}}]);