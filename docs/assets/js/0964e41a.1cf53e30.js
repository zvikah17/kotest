"use strict";(self.webpackChunkkotestdocs=self.webpackChunkkotestdocs||[]).push([[6718],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return d}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),m=p(n),d=a,g=m["".concat(l,".").concat(d)]||m[d]||c[d]||o;return n?r.createElement(g,i(i({ref:t},u),{},{components:n})):r.createElement(g,i({ref:t},u))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2339:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return l},default:function(){return d},frontMatter:function(){return s},metadata:function(){return p},toc:function(){return c}});var r=n(87462),a=n(63366),o=(n(67294),n(3905)),i=["components"],s={id:"customgens",title:"Custom Generators",slug:"custom-generators.html"},l=void 0,p={unversionedId:"proptest/customgens",id:"proptest/customgens",title:"Custom Generators",description:"To write your own generator for a type T, you just create an instance of Arb or Exhaustive.",source:"@site/docs/proptest/customgens.md",sourceDirName:"proptest",slug:"/proptest/custom-generators.html",permalink:"/docs/next/proptest/custom-generators.html",editUrl:"https://github.com/kotest/kotest/blob/master/documentation/docs/proptest/customgens.md",tags:[],version:"current",frontMatter:{id:"customgens",title:"Custom Generators",slug:"custom-generators.html"},sidebar:"proptest",previous:{title:"Configuration",permalink:"/docs/next/proptest/property-test-config.html"},next:{title:"Shrinking",permalink:"/docs/next/proptest/property-test-shrinking.html"}},u={},c=[{value:"Arbitrary",id:"arbitrary",level:3},{value:"Exhaustive",id:"exhaustive",level:3}],m={toc:c};function d(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"To write your own generator for a type T, you just create an instance of ",(0,o.kt)("inlineCode",{parentName:"p"},"Arb<T>")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"Exhaustive<T>"),"."),(0,o.kt)("h3",{id:"arbitrary"},"Arbitrary"),(0,o.kt)("p",null,"When writing a custom arbitrary we can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"arbitrary")," builder which accepts a lambda that must return the type we are generating for.\nThe parameter to this lambda is a ",(0,o.kt)("inlineCode",{parentName:"p"},"RandomSource")," parameter which contains the seed and the ",(0,o.kt)("inlineCode",{parentName:"p"},"Random")," instance. We should typically\nuse the provided ",(0,o.kt)("inlineCode",{parentName:"p"},"RandomSource")," if we need access to a ",(0,o.kt)("inlineCode",{parentName:"p"},"kotlin.Random")," instance, as this instance will have been seeded by the framework to allow for repeatable tests."),(0,o.kt)("p",null,"For example, here is a custom arb that generates a random int between 3 and 6 using the ",(0,o.kt)("inlineCode",{parentName:"p"},"arbitrary")," builder."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"val sillyArb = arbitrary { rs: RandomSource ->\n   rs.random.nextInt(3..6)\n}\n\n")),(0,o.kt)("p",null,"In addition to the ",(0,o.kt)("inlineCode",{parentName:"p"},"RandomSource")," parameter, the arbitrary builder lambda also provides the ",(0,o.kt)("inlineCode",{parentName:"p"},"ArbitraryBuilderSyntax")," context which we can leverage\nto compose other arbitraries when building ours."),(0,o.kt)("p",null,"For example, here is an ",(0,o.kt)("inlineCode",{parentName:"p"},"Arbitrary")," that supports a custom class called ",(0,o.kt)("inlineCode",{parentName:"p"},"Person"),", delegating to a String arbitrary and an Int arbitrary."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"data class Person(val name: String, val age: Int)\n\nval personArb = arbitrary {\n   val name = Arb.string(10..12).bind()\n   val age = Arb.int(21, 150).bind()\n   Person(name, age)\n}\n")),(0,o.kt)("p",null,"The resulting arbitrary produced using this syntax is equivalent to using ",(0,o.kt)("a",{parentName:"p",href:"/docs/next/proptest/generator-operations.html#map"},"map"),",\n",(0,o.kt)("a",{parentName:"p",href:"/docs/next/proptest/generator-operations.html#flatmap"},"flatMap")," and ",(0,o.kt)("a",{parentName:"p",href:"/docs/next/proptest/generator-operations.html#bind"},"bind"),"."),(0,o.kt)("h3",{id:"exhaustive"},"Exhaustive"),(0,o.kt)("p",null,"When writing a custom exhaustive we can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"exhaustive()")," extension function on a List. Nothing more to it than that really!"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"val singleDigitPrimes = listOf(2,3,5,7).exhaustive()\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'class PropertyExample: StringSpec({\n    "testing single digit primes" {\n        checkAll(singleDigitPrimes) { prime ->\n           isPrime(prime) shouldBe true\n           isPrime(prime * prime) shouldBe false\n        }\n    }\n})\n')))}d.isMDXComponent=!0}}]);