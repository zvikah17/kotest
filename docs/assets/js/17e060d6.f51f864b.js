"use strict";(self.webpackChunkkotestdocs=self.webpackChunkkotestdocs||[]).push([[1264],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return h}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),m=p(n),h=r,d=m["".concat(l,".").concat(h)]||m[h]||u[h]||i;return n?a.createElement(d,s(s({ref:t},c),{},{components:n})):a.createElement(d,s({ref:t},c))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,s=new Array(i);s[0]=m;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:r,s[1]=o;for(var p=2;p<i;p++)s[p]=n[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},38059:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return l},default:function(){return h},frontMatter:function(){return o},metadata:function(){return p},toc:function(){return u}});var a=n(87462),r=n(63366),i=(n(67294),n(3905)),s=["components"],o={id:"test_names",title:"Data Test Names",slug:"custom-test-names.html",sidebar_label:"Data Test Names"},l=void 0,p={unversionedId:"framework/datatesting/test_names",id:"framework/datatesting/test_names",title:"Data Test Names",description:"By default, the name of each test is simply the toString() on the input row.",source:"@site/docs/framework/datatesting/test_names.md",sourceDirName:"framework/datatesting",slug:"/framework/datatesting/custom-test-names.html",permalink:"/docs/next/framework/datatesting/custom-test-names.html",editUrl:"https://github.com/kotest/kotest/blob/master/documentation/docs/framework/datatesting/test_names.md",tags:[],version:"current",frontMatter:{id:"test_names",title:"Data Test Names",slug:"custom-test-names.html",sidebar_label:"Data Test Names"},sidebar:"framework",previous:{title:"Introduction",permalink:"/docs/next/framework/datatesting/data-driven-testing.html"},next:{title:"Nested Data Tests",permalink:"/docs/next/framework/datatesting/nested-tests.html"}},c={},u=[{value:"Stable Names",id:"stable-names",level:3},{value:"Using a map",id:"using-a-map",level:3},{value:"Test Name Function",id:"test-name-function",level:3},{value:"WithDataTestName",id:"withdatatestname",level:3}],m={toc:u};function h(e){var t=e.components,o=(0,r.Z)(e,s);return(0,i.kt)("wrapper",(0,a.Z)({},m,o,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"By default, the name of each test is simply the ",(0,i.kt)("inlineCode",{parentName:"p"},"toString()")," on the input row.\nThis typically works well for data classes on the JVM but requires the input rows to be ",(0,i.kt)("em",{parentName:"p"},"stable"),"."),(0,i.kt)("p",null,"However, we can specify how the test names are generated if we are not using stable data classes, or if we are\nexecuting on a non-JVM target, or simply wish to customize."),(0,i.kt)("h3",{id:"stable-names"},"Stable Names"),(0,i.kt)("p",null,"When generating tests, Kotest needs a ",(0,i.kt)("em",{parentName:"p"},"stable")," test name over the course of the test suite execution.\nThe test name is used as the basis of an identifier that points to a test when notifying gradle or intellij of a test status.\nIf the name is not stable, then the id can change, leading to errors where\ntests don't appear, or look like they didn't complete."),(0,i.kt)("p",null,"Kotest will only use the ",(0,i.kt)("inlineCode",{parentName:"p"},"toString()")," of the input class if it thinks the input class has a stable ",(0,i.kt)("inlineCode",{parentName:"p"},"toString()")," value\notherwise it will use the class name."),(0,i.kt)("p",null,"You can force Kotest to use the ",(0,i.kt)("inlineCode",{parentName:"p"},"toString()")," for test names by annotating your type with ",(0,i.kt)("inlineCode",{parentName:"p"},"@IsStableType"),". Then\nthe ",(0,i.kt)("inlineCode",{parentName:"p"},"toString()")," will be used regardless."),(0,i.kt)("p",null,"Alternatively, you can completely customize the display name of the test."),(0,i.kt)("h3",{id:"using-a-map"},"Using a map"),(0,i.kt)("p",null,"Kotest allows specifying test names by passing a map into the ",(0,i.kt)("inlineCode",{parentName:"p"},"withData")," function,\nwhere the key is the test name, and the value is the input value for that row."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'context("Pythag triples tests") {\n  withData(\n    mapOf(\n      "3, 4, 5" to PythagTriple(3, 4, 5),\n      "6, 8, 10" to PythagTriple(6, 8, 10),\n      "8, 15, 17" to PythagTriple(8, 15, 17),\n      "7, 24, 25" to PythagTriple(7, 24, 25)\n    )\n  ) { (a, b, c) ->\n    a * a + b * b shouldBe c * c\n  }\n}\n')),(0,i.kt)("h3",{id:"test-name-function"},"Test Name Function"),(0,i.kt)("p",null,"Or we can pass a function to ",(0,i.kt)("inlineCode",{parentName:"p"},"withData")," which takes the ",(0,i.kt)("em",{parentName:"p"},"row")," as input and return the test name. Depending on how\ngenerous the Kotlin type inference is feeling, you may need to specify the type parameter to the ",(0,i.kt)("em",{parentName:"p"},"withData")," function."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'context("Pythag triples tests") {\n  withData<PythagTriple>(\n    nameFn = { "${it.a}__${it.b}__${it.c}" },\n    PythagTriple(3, 4, 5),\n    PythagTriple(6, 8, 10),\n    PythagTriple(8, 15, 17),\n    PythagTriple(7, 24, 25)\n  ) { (a, b, c) ->\n    a * a + b * b shouldBe c * c\n  }\n}\n')),(0,i.kt)("p",null,"The output from this example is now slightly clearer:"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"data test example output",src:n(6867).Z,width:"527",height:"259"})),(0,i.kt)("h3",{id:"withdatatestname"},"WithDataTestName"),(0,i.kt)("p",null,"Another alternative is to implement the ",(0,i.kt)("inlineCode",{parentName:"p"},"WithDataTestName")," interface. When provided, the ",(0,i.kt)("inlineCode",{parentName:"p"},"toString()")," will not be used,\ninstead the ",(0,i.kt)("inlineCode",{parentName:"p"},"dataTestName()")," function from that interface will be invoked for each row."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},'data class PythagTriple(val a: Int, val b: Int, val c: Int) : WithDataTestName {\n  override fun dataTestName() = "wibble $a, $b, $c wobble"\n}\n')))}h.isMDXComponent=!0},6867:function(e,t,n){t.Z=n.p+"assets/images/datatest3-61c742b23508b1da55388fea50d7f996.png"}}]);