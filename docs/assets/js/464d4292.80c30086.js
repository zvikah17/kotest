"use strict";(self.webpackChunkkotestdocs=self.webpackChunkkotestdocs||[]).push([[7909],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=u(n),m=a,h=d["".concat(s,".").concat(m)]||d[m]||c[m]||o;return n?r.createElement(h,l(l({ref:t},p),{},{components:n})):r.createElement(h,l({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var u=2;u<o;u++)l[u]=n[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},73483:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return i},metadata:function(){return u},toc:function(){return c}});var r=n(87462),a=n(63366),o=(n(67294),n(3905)),l=["components"],i={id:"allure",title:"Allure",sidebar_label:"Allure",slug:"allure.html"},s=void 0,u={unversionedId:"extensions/allure",id:"extensions/allure",title:"Allure",description:"Allure is an open-source framework designed for detailed and interactive test reports.",source:"@site/docs/extensions/allure.md",sourceDirName:"extensions",slug:"/extensions/allure.html",permalink:"/docs/next/extensions/allure.html",editUrl:"https://github.com/kotest/kotest/blob/master/documentation/docs/extensions/allure.md",tags:[],version:"current",frontMatter:{id:"allure",title:"Allure",sidebar_label:"Allure",slug:"allure.html"},sidebar:"extensions",previous:{title:"HTML Reporter",permalink:"/docs/next/extensions/html_reporter.html"},next:{title:"Current Instant Listeners",permalink:"/docs/next/extensions/instant.html"}},p={},c=[{value:"Collect Data",id:"collect-data",level:3},{value:"Gradle Plugin",id:"gradle-plugin",level:3},{value:"Setting Build Dir",id:"setting-build-dir",level:3},{value:"Final Report",id:"final-report",level:3}],d={toc:c};function m(e){var t=e.components,i=(0,a.Z)(e,l);return(0,o.kt)("wrapper",(0,r.Z)({},d,i,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"http://allure.qatools.ru"},"Allure")," is an open-source framework designed for detailed and interactive test reports.\nIt works by generating report files which are then used to create the final HTML report.\nYou can think of it as like the traditional junit report but more advanced and detailed."),(0,o.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"If you prefer to see an example rather than read docs, then there is a sample project ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/kotest/kotest-examples-allure"},"here")))),(0,o.kt)("p",null,"There are two steps to allure. The first is to generate the raw data when executing tests, the second is to\ncompile that data into the interactive HTML report."),(0,o.kt)("p",null,"This module provides integration for using allure with kotest.\nTo start, add the below dependency to your Gradle build file."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-groovy"},"io.kotest.extensions:kotest-extensions-allure:${kotest.version}\n")),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://search.maven.org/artifact/io.kotest.extensions/kotest-extensions-allure"},(0,o.kt)("img",{src:"https://img.shields.io/maven-central/v/io.kotest.extensions/kotest-extensions-allure.svg?label=latest%20release"})),"\n",(0,o.kt)("a",{parentName:"p",href:"https://oss.sonatype.org/content/repositories/snapshots/io/kotest/extensions/kotest-extensions-allure/"},(0,o.kt)("img",{src:"https://img.shields.io/nexus/s/https/oss.sonatype.org/io.kotest.extensions/kotest-extensions-allure.svg?label=latest%20snapshot"}))),(0,o.kt)("p",null,"Note: The group id is different (io.kotest.extensions) from the main kotest dependencies (io.kotest)."),(0,o.kt)("h3",{id:"collect-data"},"Collect Data"),(0,o.kt)("p",null,"Allure has data collectors for most test frameworks and this module provides the integration for Kotest.\nOnce the module has been added to your buld, wire in the ",(0,o.kt)("inlineCode",{parentName:"p"},"AllureTestReporter")," class globally\nusing ",(0,o.kt)("a",{parentName:"p",href:"/docs/next/framework/project-config.html"},"project config"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},"class MyConfig : AbstractProjectConfig {\n    override fun listeners() = listOf(AllureTestReporter())\n}\n")),(0,o.kt)("p",null,"Now, whenever tests are executed, Kotest will write out test data in the allure json format."),(0,o.kt)("h3",{id:"gradle-plugin"},"Gradle Plugin"),(0,o.kt)("p",null,"Now that the tests have completed, we can compile them into\nthe ",(0,o.kt)("a",{parentName:"p",href:"https://docs.qameta.io/allure/#_report_generation"},"final report"),"."),(0,o.kt)("p",null,"This can be done manually using the allure binary, or we can use\nthe ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/allure-framework/allure-gradle"},"allure gradle plugin"),". To use the gradle plugin, first add the\nplugin to your build's plugins block."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'plugins {\n  ...\n  id("io.qameta.allure") version "2.8.1"\n}\n')),(0,o.kt)("p",null,"Next, add an allure configuration section to set the version and disable autoconfigure (because allure can only auto\nconfigure junit and kotest takes care of this for you anyway)."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'allure {\n  autoconfigure = false\n  version = "2.13.1"\n}\n')),(0,o.kt)("p",null,"Finally, execute the gradle task ",(0,o.kt)("inlineCode",{parentName:"p"},"allureReport")," and the report will be generated in ",(0,o.kt)("inlineCode",{parentName:"p"},"./build/reports/allure-report")," and\ninside you should find the index.html entry point for the report."),(0,o.kt)("h3",{id:"setting-build-dir"},"Setting Build Dir"),(0,o.kt)("p",null,"If you are not using the gradle plugin then you will need to inform Allure where the build dir is by setting\nthe ",(0,o.kt)("inlineCode",{parentName:"p"},"allure.results.directory")," system property on your tests configuration. If you are using the gradle plugin, then\nthis can be skipped as the gradle plugin does this for you."),(0,o.kt)("p",null,"For example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'tasks.named<Test>("test") { // or "jvmTest" etc\n   useJUnitPlatform()\n   systemProperty("allure.results.directory", project.buildDir.toString() + "/allure-results")\n}\n')),(0,o.kt)("h3",{id:"final-report"},"Final Report"),(0,o.kt)("p",null,"If all was successful, after test execution and report generation, you will see something like this:"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"allure screenshot",src:n(92209).Z,width:"1932",height:"996"})))}m.isMDXComponent=!0},92209:function(e,t,n){t.Z=n.p+"assets/images/allure-a95d026b3e0d686c7eb9f32e3f0eb2b8.png"}}]);