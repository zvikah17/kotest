"use strict";(self.webpackChunkkotestdocs=self.webpackChunkkotestdocs||[]).push([[7466],{3905:function(t,e,n){n.d(e,{Zo:function(){return p},kt:function(){return m}});var r=n(67294);function a(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function i(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function o(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?i(Object(n),!0).forEach((function(e){a(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function s(t,e){if(null==t)return{};var n,r,a=function(t,e){if(null==t)return{};var n,r,a={},i=Object.keys(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}var l=r.createContext({}),c=function(t){var e=r.useContext(l),n=e;return t&&(n="function"==typeof t?t(e):o(o({},e),t)),n},p=function(t){var e=c(t.components);return r.createElement(l.Provider,{value:e},t.children)},d={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},u=r.forwardRef((function(t,e){var n=t.components,a=t.mdxType,i=t.originalType,l=t.parentName,p=s(t,["components","mdxType","originalType","parentName"]),u=c(n),m=a,k=u["".concat(l,".").concat(m)]||u[m]||d[m]||i;return n?r.createElement(k,o(o({ref:e},p),{},{components:n})):r.createElement(k,o({ref:e},p))}));function m(t,e){var n=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var i=n.length,o=new Array(i);o[0]=u;var s={};for(var l in e)hasOwnProperty.call(e,l)&&(s[l]=e[l]);s.originalType=t,s.mdxType="string"==typeof t?t:a,o[1]=s;for(var c=2;c<i;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},9558:function(t,e,n){n.r(e),n.d(e,{assets:function(){return p},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return d}});var r=n(87462),a=n(63366),i=(n(67294),n(3905)),o=["components"],s={id:"advanced_extensions",title:"Advanced Extensions",slug:"advanced-extensions.html",sidebar_label:"Advanced Extensions"},l=void 0,c={unversionedId:"framework/extensions/advanced_extensions",id:"version-5.2/framework/extensions/advanced_extensions",title:"Advanced Extensions",description:"This table lists more advanced extensions that can be used to hook into the Engine itself to:",source:"@site/versioned_docs/version-5.2/framework/extensions/advanced.md",sourceDirName:"framework/extensions",slug:"/framework/extensions/advanced-extensions.html",permalink:"/docs/5.2/framework/extensions/advanced-extensions.html",editUrl:"https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.2/framework/extensions/advanced.md",tags:[],version:"5.2",frontMatter:{id:"advanced_extensions",title:"Advanced Extensions",slug:"advanced-extensions.html",sidebar_label:"Advanced Extensions"},sidebar:"framework",previous:{title:"Simple Extensions",permalink:"/docs/5.2/framework/extensions/simple-extensions.html"},next:{title:"Examples",permalink:"/docs/5.2/framework/extensions/extension-examples.html"}},p={},d=[],u={toc:d};function m(t){var e=t.components,n=(0,a.Z)(t,o);return(0,i.kt)("wrapper",(0,r.Z)({},u,n,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"This table lists more advanced extensions that can be used to hook into the Engine itself to:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"intercept tests, skipping them, and modify test results"),(0,i.kt)("li",{parentName:"ul"},"intercept specs specs skipping them if required"),(0,i.kt)("li",{parentName:"ul"},"post process spec instances after instantiation"),(0,i.kt)("li",{parentName:"ul"},"modify the coroutine context used by specs and tests"),(0,i.kt)("li",{parentName:"ul"},"apply custom instantiation logic"),(0,i.kt)("li",{parentName:"ul"},"filter specs and tests"),(0,i.kt)("li",{parentName:"ul"},"adjust test output")),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Extension"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"ConstructorExtension"),(0,i.kt)("td",{parentName:"tr",align:null},"Provides custom logic to instantiate spec classes. An example is the Spring extension constructor extension which autowire's spring beans.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"TestCaseExtension"),(0,i.kt)("td",{parentName:"tr",align:null},"Intercepts calls to a test, can skip a test, override the test result, and modify the coroutine context.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"SpecExtension"),(0,i.kt)("td",{parentName:"tr",align:null},"Intercepts calls to a spec, can skip a spec, and modify the coroutine context.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"SpecRefExtension"),(0,i.kt)("td",{parentName:"tr",align:null},"Intercepts calls to a spec before it is instantiated. Can skip instantiation.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"DisplayNameFormatterExtension"),(0,i.kt)("td",{parentName:"tr",align:null},"Can customize the display names of tests used in test output.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"EnabledExtension"),(0,i.kt)("td",{parentName:"tr",align:null},"Can provide custom logic to determine if a test is enabled or disabled.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"ProjectExtension"),(0,i.kt)("td",{parentName:"tr",align:null},"Intercepts calls to the test engine before a project starts.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"SpecExecutionOrderExtension"),(0,i.kt)("td",{parentName:"tr",align:null},"Can sort specs before execution begins to provide a custom spec execution order.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"TagExtension"),(0,i.kt)("td",{parentName:"tr",align:null},"Can provide active tags from arbitrary sources.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"InstantiationErrorListener"),(0,i.kt)("td",{parentName:"tr",align:null},"Is notified when a spec fails to be instantiated due to some exception.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"InstantiationListener"),(0,i.kt)("td",{parentName:"tr",align:null},"Is notified when a spec is successfully instantiated.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"PostInstantiationExtension"),(0,i.kt)("td",{parentName:"tr",align:null},"Intercepts specs when they are instantiated, can replace the spec instance and modify coroutine context.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"IgnoredSpecListener"),(0,i.kt)("td",{parentName:"tr",align:null},"Is notified when a spec is skipped.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"SpecFilter"),(0,i.kt)("td",{parentName:"tr",align:null},"Can provide custom logic to skip a spec.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"TestFilter"),(0,i.kt)("td",{parentName:"tr",align:null},"Can provide custom logic to skip a test.")))))}m.isMDXComponent=!0}}]);